---
 - hosts: localhost
   connection: local
   gather_facts: false

   vars:
     dns_hostname: '192.168.80.5'
     ip_add: {{ ip.split(',') }}
     host_name: {{ vmname.split(',') }}
    #  dns_username: dns-app-prod-admin1@GLOBETEL.COM

   tasks:
     # adding encrypted username and password via win_keys
     - name: Include vars of
       include_vars: file/win_key.yaml
      #  no_log: true

    # adding the DNS server to inventory
     - name: Add AD/DNS Server to in-memory inventory
       add_host:
         host: "{{ dns_hostname }}"
         group: dnsserver
         ansible_connection: ssh
         ansible_shell_type: cmd
         ansible_port: 22
         # ansible_winrm_transport: ntlm
         ansible_user: "{{ dev_ad_user }}"
         ansible_password: "{{ dev_ad_pass }}"
         ansible_winrm_server_cert_validation: ignore
         no_log: true

   tasks:
     - name: adding DNS record
       win_shell: "dnscmd  . /recordadd {{ dns_dev_zone_fwd }} {{ vm_name }} A {{ ip }}"
       retries: 3
       delay: 3
       register: result
       until: ("DNS_ERROR_RECORD_ALREADY_EXISTS" in result.stdout) or (result.rc == 0)
       failed_when: >
         ("DNS_ERROR_RECORD_ALREADY_EXISTS" not in result.stdout) and
         (result.rc != 0)

     - name: IP Sections
       ansible.builtin.set_fact:
         ip_sections: "{{ ip.split('.') | list }}"

     - name: DEV zone PTR
       ansible.builtin.set_fact:
         dns_dev_zone_ptr: "{{ ip_sections[2] }}.{{ ip_sections[1] }}.{{ ip_sections[0] }}.in-addr.arpa"
    
     - name: Reverse Zone dns file
       ansible.builtin.set_fact:
         reverse_lookup_ip: "{{ ip_sections[0] }}.{{ ip_sections[1] }}.{{ ip_sections[2] }}"

     - name: Create Reverse lookup zone
       become: true
       ansible.windows.win_powershell: 
          script: | 
            Add-DnsServerPrimaryZone -NetworkID "{{ reverse_lookup_ip }}.0/24" -ZoneFile "{{ dns_dev_zone_ptr }}.dns"

     - name: Create REverse DNS records
       win_shell: "dnscmd . /recordadd {{ dns_dev_zone_ptr }} {{ ip_sections[3] }} PTR {{ vm_name }}"
       retries: 3
       delay: 3
       register: result
       until: ("DNS_ERROR_RECORD_ALREADY_EXISTS" in result.stdout) or (result.rc == 0)
       failed_when: >
         ("DNS_ERROR_RECORD_ALREADY_EXISTS" not in result.stdout) and
         (result.rc != 0)